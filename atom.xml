<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eden</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-12T05:58:29.243Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python IO - 输出重定向</title>
    <link href="http://yoursite.com/2019/02/12/Python%20IO%20-%20%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://yoursite.com/2019/02/12/Python IO - 输出重定向/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-12T05:58:29.243Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写Python单元测试的时候需要获取到待测试方法的<code>print()</code>输出，在<code>Shell</code>中使用管道重定向输出很容易，但是在<code>Python</code>中如何进行呢？</p><a id="more"></a><h1 id="Python-中的标准输入输出"><a href="#Python-中的标准输入输出" class="headerlink" title="Python 中的标准输入输出"></a>Python 中的标准输入输出</h1><h2 id="print-和-sys-stdout"><a href="#print-和-sys-stdout" class="headerlink" title="print 和 sys.stdout"></a>print 和 sys.stdout</h2><p>当我们在 Python 中打印值调用 <code>print(value)</code> 时候，等价于调用 <code>sys.stdout.write(value+&#39;\n&#39;)</code></p><p>print 将内容打印到了控制台，然后追加了一个换行符</p><h2 id="input-和-sys-stdin"><a href="#input-和-sys-stdin" class="headerlink" title="input 和 sys.stdin"></a>input 和 sys.stdin</h2><p>当我们用 raw_input(‘promption: ‘) 时，事实上是先把提示信息输出，然后捕获输入</p><p>以下两组在实际上等价：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hi=raw_input(&apos;Hi~&apos;)</span><br><span class="line"></span><br><span class="line">sys.stdout.write(&apos;Hi~&apos;)</span><br><span class="line"># -1 to discard the &apos;\n&apos; in input stream</span><br><span class="line">hi=sys.stdin.readline()[:-1]</span><br></pre></td></tr></table></figure></p><p>而在Python 3中新增的<code>input()</code>函数则在此基础上，增加了类型判断的处理，尝试将输入解析为适当的数据类型。</p><blockquote><p>实际上 print 或者 raw_input 在 cpython 中的源码要复杂得多，这里‘等价’的仅是示意其与标准输入输出直接相关。源码可以参考文末给出的链接</p></blockquote><h1 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h1><p>默认的 <code>sys.stdout</code> 指向控制台，我们可以重定向到其他流(或者具有<code>write</code>方法的对象)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#标准输出重定向至文件</span><br><span class="line">with open(&apos;out.txt&apos;, &apos;w+&apos;) as f:</span><br><span class="line">    sys.stdout = f </span><br><span class="line"></span><br><span class="line"># 标准输出重定向至字符流</span><br><span class="line">sys.stdout = strout = StringIO()</span><br></pre></td></tr></table></figure></p><p>完成任务后最好恢复标准输出至原先的地址(默认控制台)：</p><ul><li><p>可以在重定向前获取stdout的默认引用，恢复的时候再指向这个引用即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">orig_stdout = sys.stdout</span><br><span class="line"># ...$重定向代码$...</span><br><span class="line"># ...print(&apos;hahaha...&apos;)...</span><br><span class="line"></span><br><span class="line"># 恢复</span><br><span class="line">sys.stdout = orig_stdout</span><br></pre></td></tr></table></figure></li><li><p>或使用<code>sys.__stdout__</code>，其保存程序开始时<code>sys.stdout</code>的原始值，且不受重定向影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ...$重定向代码$...</span><br><span class="line"># ...print(&apos;hahaha...&apos;)...</span><br><span class="line">sys.stdout = sys.__stdout__</span><br></pre></td></tr></table></figure></li></ul><p>结合上下文管理器，我们还可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@contextmanager</span><br><span class="line">def stdout_redirected(new_stdout):</span><br><span class="line">    save_stdout = sys.stdout</span><br><span class="line">    sys.stdout = new_stdout</span><br><span class="line">    try:</span><br><span class="line">        yield None</span><br><span class="line">    finally:</span><br><span class="line">        sys.stdout = save_stdout</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">with opened(filename, &quot;w&quot;) as f:</span><br><span class="line">    with stdout_redirected(f):</span><br><span class="line">        print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure></p><p>应用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line"># parse 函数直接将&apos;解析&apos;结果打印出来了，我们需要判断解析是否正确</span><br><span class="line"></span><br><span class="line">def parse(query):</span><br><span class="line">    print(f&apos;query: &#123;query&#125;&apos;)</span><br><span class="line"></span><br><span class="line">def test(query):</span><br><span class="line">    sys.stdout = strdout = StringIO()</span><br><span class="line">    parse(query)</span><br><span class="line">    sys.stdout = sys.__stdout__</span><br><span class="line">    return strdout.getvalue()</span><br><span class="line"></span><br><span class="line">result = test(&apos;This message is for query&apos;)</span><br><span class="line">print(result.split()[1])</span><br><span class="line"></span><br><span class="line"># output：This</span><br></pre></td></tr></table></figure></p><p>同样的，<code>sys.stderr</code>, <code>sys.stdin</code> 也都可以被重定向到多个地址。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://github.com/python/cpython/blob/3.6/Python/sysmodule.c" target="_blank" rel="noopener">cpython 3.6 - sys</a></li><li><a href="https://github.com/python/cpython/blob/c41523ac2447b0e86b702f58458f3b3548439c8b/Python/bltinmodule.c#L1864" target="_blank" rel="noopener">cpython 3.6 - input</a></li><li><a href="https://docs.python.org/3/library/sys.html#sys.__stdout__" target="_blank" rel="noopener">python 3 doc - sys.__stdout__</a></li><li><a href="https://www.python.org/dev/peps/pep-0343/#use-cases" target="_blank" rel="noopener">PEP 343 – The “with” Statement use-case</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在写Python单元测试的时候需要获取到待测试方法的&lt;code&gt;print()&lt;/code&gt;输出，在&lt;code&gt;Shell&lt;/code&gt;中使用管道重定向输出很容易，但是在&lt;code&gt;Python&lt;/code&gt;中如何进行呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="io" scheme="http://yoursite.com/categories/Python/io/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
